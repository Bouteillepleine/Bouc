name: Build and Release Kernel
on:
  push:
    branches: [main]
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  BRANCH: "android14-6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Free Disk Space
        run: |
          sudo apt-get update -qq
          sudo apt-get install -qq curl
          curl -fsSL https://raw.githubusercontent.com/kou/arrow/e49d8ae15583ceff03237571569099a6ad62be32/ci/scripts/util_free_space.sh | bash

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/ccache
            builds/${{ env.ROOT_DIR }}
            ~/.cache/repo
          key: ${{ runner.os }}-kernel-${{ hashFiles('.github/workflows/*.yml') }}

      - name: Setup Build Environment
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip ninja-build rsync ccache cmake flex bison \
            libssl-dev libelf-dev zlib1g-dev git-lfs build-essential \
            libdw-dev wget unzip zip curl bc file make g++ gcc

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          max-size: 2G

      - name: Configure Python Environment
        run: |
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict
          mkdir -p ~/.bin
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo
          chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Initialize Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y-%m-%d-%H-%M')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          mkdir -p "builds/${ROOT_DIR}"

      - name: Clone Dependencies
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          git clone https://github.com/Kernel-SU/AnyKernel3 --depth=1
          git clone https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1
          git clone https://github.com/WildPlusKernel/kernel_patches.git

      - name: Sync Kernel Sources
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          set -ex
          # Create the required directory structure
          mkdir -p kernel_platform/oneplus13r_v
          cd kernel_platform/oneplus13r_v

          # Initialize repo
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git \
            -b oneplus/sm8650 \
            -m oneplus_13r.xml \
            --depth=1 || exit 1

          # Sync repositories
          repo sync -c -j$(nproc --all) \
            --force-sync \
            --no-clone-bundle \
            --no-tags || exit 1

          # Clean protected exports
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*

      - name: Integrate KernelSU
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -ex
          git fetch --unshallow
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next
          git submodule update --init --recursive
          cd KernelSU-Next/kernel
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200)
          echo "KSUVER=${KSU_VERSION}" >> $GITHUB_ENV
          sed -i "s/DKSU_VERSION=11998/DKSU_VERSION=${KSU_VERSION}/" Makefile

      - name: Apply Kernel Modifications
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -ex
          SUSFS_PATCHES="../../../susfs4ksu/kernel_patches"
          KERNEL_PATCHES="../../../kernel_patches"

          mkdir -p ./common/{fs,include/linux}
          cp -v "${SUSFS_PATCHES}"/fs/* ./common/fs/
          cp -v "${SUSFS_PATCHES}"/include/linux/* ./common/include/linux/

          declare -A patches=(
            ["50_add_susfs_in_gki-android14-6.1.patch"]="SUSFS core"
            ["69_hide_stuff.patch"]="Security hardening"
            ["next_hooks.patch"]="KernelSU hooks"
            ["syscall_hooks.patch"]="System call handling"
          )

          cd common
          for patch in "${!patches[@]}"; do
            echo "Applying ${patches[$patch]}..."
            patch -p1 --no-backup-if-mismatch < "../${KERNEL_PATCHES}/${patch}" || exit 1
          done

          git add -A
          git commit -m "BUILD: Applied kernel patches" || true

      - name: Configure Kernel Build
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          set -ex
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          
          # KernelSU configuration
          ksu_configs=(
            KSU KSU_SUSFS KSU_SUSFS_HAS_MAGIC_MOUNT
            KSU_SUSFS_SUS_PATH KSU_SUSFS_SUS_MOUNT
            KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT
            KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT
            KSU_SUSFS_SUS_KSTAT KSU_SUSFS_TRY_UMOUNT
            KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT
            KSU_SUSFS_SPOOF_UNAME KSU_SUSFS_ENABLE_LOG
            KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS
            KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG
            KSU_SUSFS_OPEN_REDIRECT
          )
          for config in "${ksu_configs[@]}"; do
            ./common/scripts/config --file "$CONFIG_FILE" --enable "$config"
          done
          
          # System configuration
          sys_configs=(
            TMPFS_XATTR TMPFS_POSIX_ACL
            IP_NF_TARGET_TTL IP6_NF_TARGET_HL
            IP6_NF_MATCH_HL SCHED_CLASS_EXT SMP
          )
          for config in "${sys_configs[@]}"; do
            ./common/scripts/config --file "$CONFIG_FILE" --enable "$config"
          done

          # Disable unwanted features
          ./common/scripts/config --file "$CONFIG_FILE" --disable \
            KSU_WITH_KPROBES KSU_SUSFS_SUS_OVERLAYFS KSU_SUSFS_SUS_SU

          # LTO configuration
          sed -i '/CONFIG_LTO/d' "$CONFIG_FILE"
          echo -e "CONFIG_LTO=y\nCONFIG_LTO_CLANG_FULL=y" >> "$CONFIG_FILE"

          # Build system adjustments
          sed -i 's/check_defconfig//' ./common/build.config.gki
          sed -i 's/-dirty//g' ./common/scripts/setlocalversion
          sed -i 's/-maybe-dirty//g' ./build/kernel/kleaf/impl/stamp.bzl

      - name: Build Kernel
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v
        run: |
          set -ex
          mkdir -p out
          export CCACHE_DIR="$HOME/.cache/ccache"
          export PATH="/usr/lib/ccache:$PATH"

          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            -o "$(pwd)/out" || exit 1

      - name: Package Artifacts
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          set -ex
          # Verify kernel image exists
          [ -f kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image ] || {
            echo "❌ Kernel image missing!"
            exit 1
          }

          # Prepare AnyKernel3 directory
          cp -v kernel_platform/oneplus13r_v/kernel_platform/out/dist/Image AnyKernel3/
          
          # Download and verify SUSFS module
          wget -q -O AnyKernel3/ksu_module_susfs.zip \
            https://github.com/sidex15/ksu_module_susfs/releases/latest/download/ksu_module_susfs_1.5.2+.zip
          [ -f AnyKernel3/ksu_module_susfs.zip ] || {
            echo "❌ Failed to download SUSFS module!"
            exit 1
          }

          # Create final package
          cd AnyKernel3
          zip -r9 "../OP13r-KSU-${KSUVER}.zip" ./*
          echo "zip_name=OP13r-KSU-${KSUVER}.zip" >> $GITHUB_ENV

      - name: Upload Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: kernel-${{ env.ROOT_DIR }}
          path: builds/${{ env.ROOT_DIR }}/*.zip          

name: One+ build Susf4Ksu (ThinLTO) # Updated Name

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"
  BRANCH: "android14-6.1"
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-release:
    runs-on: ubuntu-latest
    timeout-minutes: 180 # Keep 180 for now, increase if ThinLTO still times out
    steps:
      - name: Checkout Workflow Code (Including Manual Build Script)
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Verify Manual Build Script Exists in Workspace
        run: |
          if [ ! -f "${{ github.workspace }}/build_with_bazel.py" ]; then
            echo "❌ Error: Manual build_with_bazel.py not found in the root of the workflow repository!"
            exit 1
          else
            echo "✅ Manual build_with_bazel.py found in workspace."
          fi

      - name: Free Disk Space
        run: |
          echo "Starting disk space cleanup..."
          sudo apt-get update -qq; sudo apt-get install -qq curl wget
          curl -fsSL https://raw.githubusercontent.com/TheMuppets/proprietary_vendor_muppets/master/meta/ci/util_free_space.sh | bash -s 50
          echo "Disk space cleanup finished."

      - name: Setup Build Environment Packages
        run: |
          echo "Setting up build environment packages..."
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync ccache cmake libdw-dev zlib1g-dev \
            libncurses5-dev git-lfs
          echo "Build environment packages setup complete."

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }}
          restore-keys: |
            ${{ github.workflow }}-${{ github.ref }}-
          max-size: 2G # Consider increasing if disk allows, e.g., 4G or 5G

      - name: Setup Python, Repo Tool, and Git LFS
        run: |
          echo "Initializing git-lfs..."; git lfs install --system
          echo "Setting up Python and repo tool..."
          python3 -m pip install --upgrade pip; pip3 install gitpython xmltodict
          mkdir -p ~/.bin; curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo; chmod a+x ~/.bin/repo
          echo "$HOME/.bin" >> $GITHUB_PATH
          git config --global user.name "GitHub Actions Bot"; git config --global user.email "actions@github.com"
          echo "Python, repo tool, and Git LFS setup complete."

      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y%m%d-%H%M')-release"
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV
          echo "Build directory: ${ROOT_DIR}"; mkdir -p "builds/${ROOT_DIR}"

      - name: Clone Tooling & Patch Repositories
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Cloning AnyKernel3 and patch source repositories..."
          repos=( "https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3"
                  "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 --depth=1 susfs4ksu_patches"
                  "https://github.com/WildPlusKernel/kernel_patches.git --depth=1 wild_kernel_patches" )
          for repo_info in "${repos[@]}"; do read -r url args name <<< "$repo_info"; echo "Cloning ${url} into ${name}..."; git clone $url $args $name || exit 1; done
          echo "Tooling and patch repositories cloned successfully."

      - name: Setup Kernel Source (OnePlus 13R)
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Setting up kernel source..."; mkdir -p kernel_platform/oneplus13r_v; cd kernel_platform/oneplus13r_v
          echo "Initializing repo..."; repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus_13r.xml --depth=1 --git-lfs || exit 1
          echo "Syncing repo..."; repo sync -c -f -j$(nproc --all) --force-sync --no-clone-bundle --no-tags --verbose || exit 1
          echo "Repo sync completed successfully."
          echo "Removing ABI GKI protected exports..."; rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
          echo "Kernel source setup complete."

      - name: Integrate KernelSU
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Setting up KernelSU..."; curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next || exit 1
          git submodule update --init --recursive; cd KernelSU-Next/kernel
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200); echo "KSUVER=${KSU_VERSION}" >> $GITHUB_ENV
          sed -i "s/.*DKSU_VERSION=.*/\t\t\tDKSU_VERSION=${KSU_VERSION} \\\\/" Makefile || exit 1
          echo "KernelSU setup complete. KSU version set to ${KSU_VERSION}."

      - name: Integrate SUSFS (Apply Patches)
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Applying SUSFS patches..."; set -euxo pipefail
          KERNEL_PLATFORM_DIR="kernel_platform/oneplus13r_v/kernel_platform"; SUSFS_PATCH_DIR="susfs4ksu_patches"; WILD_PATCH_DIR="wild_kernel_patches"
          if [ ! -d "$SUSFS_PATCH_DIR" ] || [ ! -d "$WILD_PATCH_DIR" ]; then echo "❌ Patch dirs not found!"; exit 1; fi
          echo "Copying patch files..."; cp "${SUSFS_PATCH_DIR}/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" "${KERNEL_PLATFORM_DIR}/common/"; cp "${WILD_PATCH_DIR}/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" "${KERNEL_PLATFORM_DIR}/KernelSU-Next/"; cp "${WILD_PATCH_DIR}/next/syscall_hooks.patch" "${KERNEL_PLATFORM_DIR}/common/"; cp "${SUSFS_PATCH_DIR}/kernel_patches/fs/"* "${KERNEL_PLATFORM_DIR}/common/fs/"; cp "${SUSFS_PATCH_DIR}/kernel_patches/include/linux/"* "${KERNEL_PLATFORM_DIR}/common/include/linux/"
          echo "Applying patches..."; cd "${KERNEL_PLATFORM_DIR}"; cd ./KernelSU-Next; patch -N -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || echo "ℹ️"; cd ../common; patch -N -p1 < 50_add_susfs_in_gki-android14-6.1.patch || echo "ℹ️"
          HIDE_STUFF_PATCH_PATH="../../${WILD_PATCH_DIR}/69_hide_stuff.patch"; if [ -f "$HIDE_STUFF_PATCH_PATH" ]; then cp "$HIDE_STUFF_PATCH_PATH" ./; patch -N -p1 -F 3 < 69_hide_stuff.patch || echo "ℹ️"; else echo "ℹ️"; fi; patch -N -p1 -F 3 < syscall_hooks.patch || echo "ℹ️"
          echo "SUSFS patching complete."; set +euxo pipefail

      - name: Apply KernelSU Compatibility Fixes for Kprobes=n
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform/common/drivers/kernelsu
        run: |
          echo "Applying compatibility fixes to sucompat.c..."; TARGET_FILE="sucompat.c"
          if [ ! -f "$TARGET_FILE" ]; then echo "❌ $TARGET_FILE not found!"; exit 1; fi
          if grep -q "ADDED_KPROBE_FIX" "$TARGET_FILE"; then echo "✅ Fixes already applied."; exit 0; fi
          sed -i '428i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || exit 1; sed -i '429a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || exit 1; sed -i '437i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || exit 1; sed -i '441a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || exit 1; sed -i '445i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || exit 1; sed -i '449a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || exit 1
          echo "✅ Fixes applied to $TARGET_FILE."

      - name: Configure Kernel Options
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Applying kernel configurations..."; set -e; CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          CONFIGS=( "CONFIG_KSU=y" "CONFIG_KSU_WITH_KPROBES=n" "CONFIG_KSU_SUSFS=y" "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y" "CONFIG_KSU_SUSFS_SUS_PATH=y" "CONFIG_KSU_SUSFS_SUS_MOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y" "CONFIG_KSU_SUSFS_SUS_KSTAT=y" "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n" "CONFIG_KSU_SUSFS_TRY_UMOUNT=y" "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y" "CONFIG_KSU_SUSFS_SPOOF_UNAME=y" "CONFIG_KSU_SUSFS_ENABLE_LOG=y" "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y" "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y" "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y" "CONFIG_KSU_SUS_SU=n" "CONFIG_TMPFS_XATTR=y" "CONFIG_TMPFS_POSIX_ACL=y" "CONFIG_USB_OTG=y" "CONFIG_IP_NF_TARGET_TTL=y" "CONFIG_IP6_NF_TARGET_HL=y" "CONFIG_IP6_NF_MATCH_HL=y" "CONFIG_SCHED_CLASS_EXT=y" "CONFIG_SMP=y" "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y" "CONFIG_MSM_PERFORMANCE=y" "CONFIG_NO_HZ_IDLE=y" "CONFIG_PM_SLEEP_SMP=y" "CONFIG_DEBUG_KERNEL=n" "CONFIG_DYNAMIC_DEBUG=n" "CONFIG_DEBUG_INFO=n" )
          echo "Applying configurations to $CONFIG_FILE..."; touch "$CONFIG_FILE"
          for CONFIG in "${CONFIGS[@]}"; do CONFIG_KEY=$(echo "$CONFIG" | cut -d'=' -f1); sed -i "/^${CONFIG_KEY}=/d" "$CONFIG_FILE"; sed -i "/^# ${CONFIG_KEY} is not set/d" "$CONFIG_FILE"; if [[ "$CONFIG" == *=n ]]; then echo "# ${CONFIG_KEY} is not set" >> "$CONFIG_FILE"; else echo "$CONFIG" >> "$CONFIG_FILE"; fi; done
          sort -u "$CONFIG_FILE" -o "$CONFIG_FILE"; sed -i 's/check_defconfig//' ./common/build.config.gki || echo "ℹ️ 'check_defconfig' not found"; set +e; echo "Kernel configuration applied."

      - name: Apply Final Source Modifications (sed)
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Running final sed modifications..."; echo "Removing '-dirty' suffix...";
          find . -path '*/scripts/setlocalversion' -exec sed -i 's/-dirty//' {} + || echo "⚠️"; find . -path '*/build/kernel/kleaf/workspace_status_stamp.py' -exec sed -i "s/'git_dirty': '1'/'git_dirty': '0'/" {} + || echo "ℹ️"
          echo "Final source modifications complete."

      - name: Copy Manual Build Script (with Verification)
        run: |
          TARGET_DIR="builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v"; TARGET_SCRIPT_PATH="${TARGET_DIR}/build_with_bazel.py"; SOURCE_SCRIPT="${{ github.workspace }}/build_with_bazel.py"
          echo "Copying manual build script from ${SOURCE_SCRIPT} to ${TARGET_DIR}/..."; if [ ! -f "$SOURCE_SCRIPT" ]; then echo "❌ Source script not found!"; exit 1; fi
          mkdir -p "${TARGET_DIR}" || exit 1; cp "$SOURCE_SCRIPT" "${TARGET_DIR}/" || exit 1; chmod +x "${TARGET_SCRIPT_PATH}" || exit 1
          echo "Verifying script presence in target directory: ${TARGET_SCRIPT_PATH}"; if [ ! -f "${TARGET_SCRIPT_PATH}" ]; then echo "❌ Script NOT found after copy!"; ls -la "${TARGET_DIR}"; exit 1; else echo "✅ Script confirmed present."; ls -la "${TARGET_DIR}"; fi
          echo "✅ Manual build script copied successfully."

      - name: Build Kernel using Bazel script (ThinLTO) # CHANGED LTO flag
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v
        run: |
          echo "Starting Bazel kernel build using copied script..."; export PATH="/usr/lib/ccache:$PATH"; echo "Initial ccache stats:"; ccache -s
          export BAZEL_FINAL_ARTIFACT_DIR="$(pwd)/out"; export BAZEL_INTERNAL_OUTPUT_BASE="${BAZEL_FINAL_ARTIFACT_DIR}/bazel_output_base"
          mkdir -p "${BAZEL_FINAL_ARTIFACT_DIR}" "${BAZEL_INTERNAL_OUTPUT_BASE}"
          echo "Bazel Final Artifact Directory: ${BAZEL_FINAL_ARTIFACT_DIR}"; echo "Bazel Internal Output Base: ${BAZEL_INTERNAL_OUTPUT_BASE}"

          ./build_with_bazel.py \
            -t pineapple \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            --lto=thin `# USE THINLTO (RECOMMENDED FOR CI)` \
            --output_base "${BAZEL_INTERNAL_OUTPUT_BASE}" \
            -o "${BAZEL_FINAL_ARTIFACT_DIR}" \
             || { echo "❌ Bazel build failed"; exit 1; }

          echo "✅ Bazel kernel build completed successfully."; echo "Final ccache stats:"; ccache -s

          echo "Verifying build outputs in ${BAZEL_FINAL_ARTIFACT_DIR}..."; if [ ! -f "${BAZEL_FINAL_ARTIFACT_DIR}/dist/Image" ]; then echo "❌ Kernel Image not found!"; ls -l "${BAZEL_FINAL_ARTIFACT_DIR}/dist/"; exit 1; else echo "✅ Kernel Image found."; fi
          if [ ! -d "${BAZEL_FINAL_ARTIFACT_DIR}/staging/lib/modules" ] || [ -z "$(ls -A ${BAZEL_FINAL_ARTIFACT_DIR}/staging/lib/modules)" ]; then echo "⚠️ Mod staging dir empty/not found."; else echo "✅ Mod staging dir found."; fi
          echo "Build output verification complete."

      - name: Create Flashable ZIP Package (AnyKernel3)
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Creating AnyKernel3 ZIP package..."; AK3_DIR="AnyKernel3"; BAZEL_OUTPUT_DIR="kernel_platform/oneplus13r_v/out"; KERNEL_IMAGE_PATH="${BAZEL_OUTPUT_DIR}/dist/Image"; MODULE_STAGING_PATH="${BAZEL_OUTPUT_DIR}/staging"
          if [ ! -f "$KERNEL_IMAGE_PATH" ]; then echo "❌ Kernel image not found!"; exit 1; fi; echo "Copying kernel image..."; cp "$KERNEL_IMAGE_PATH" "$AK3_DIR/Image" || exit 1
          MODULE_SRC_ROOT=$(find "$MODULE_STAGING_PATH/lib/modules/" -maxdepth 1 -mindepth 1 -type d -print -quit)
          if [ -d "$MODULE_SRC_ROOT/kernel" ]; then MODULE_TARGET_DIR="$AK3_DIR/modules/vendor/lib/modules"; echo "Copying modules..."; mkdir -p "$MODULE_TARGET_DIR"; find "$MODULE_SRC_ROOT/kernel" -name '*.ko' -exec cp --parents -t "$MODULE_TARGET_DIR" {} + || echo "⚠️"; echo "Copying module metadata..."; cp "$MODULE_SRC_ROOT/modules."* "$MODULE_TARGET_DIR/" 2>/dev/null || true; touch "$MODULE_TARGET_DIR/modules.load"; echo "Module copy complete."; else echo "⚠️ Mod staging path not found/empty."; fi
          cd "$AK3_DIR"; ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}-${{ github.run_number }}.zip"; echo "📦 Creating zip file: ../$ZIP_NAME"; zip -r9 "../$ZIP_NAME" . -x ".git*" || exit 1; cd ..
          echo "✅ ZIP package created:"; ls -lh "$ZIP_NAME"; echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifact (Flashable ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: OP13r-KSU-${{ env.KSUVER }}-${{ github.run_number }}
          path: builds/${{ env.ROOT_DIR }}/${{ env.zip_name }}
          if-no-files-found: error
          retention-days: 7

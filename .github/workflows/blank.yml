name: OP13r-KSU Kernel Build (Bazel Focus - Full LTO for GKI)

on:
  push:
    branches:
      - main # Triggers on push to the main branch
  workflow_dispatch: # Allows manual triggering

env:
  DEBIAN_FRONTEND: noninteractive
  ROOT_DIR_PREFIX: "OP13r-A15"        # Prefix for the build directory
  # BRANCH: "android14-6.1"         # Defined for context, used in SUSFS clone
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Token for API interactions if needed

jobs:
  build-release:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner
    timeout-minutes: 180   # Timeout allowing for potentially longer full LTO link time
    steps:
      - name: Checkout Workflow Code
        uses: actions/checkout@v4
        with:
          fetch-depth: 1 # Fetch only the latest commit of the workflow repo itself

      - name: Free Disk Space
        run: |
          echo "Starting disk space cleanup..."
          sudo apt-get update -qq
          sudo apt-get install -qq curl wget # Ensure wget is installed too
          # Use a common script to free up space
          curl -fsSL https://raw.githubusercontent.com/TheMuppets/proprietary_vendor_muppets/master/meta/ci/util_free_space.sh | bash -s 50 # Keep 50GB free
          echo "Disk space cleanup finished."

      - name: Setup Build Environment Packages
        run: |
          echo "Setting up build environment packages..."
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            python3-pip curl git zip unzip gcc g++ make ninja-build file \
            bc bison flex libssl-dev libelf-dev wget build-essential \
            python3-dev python3-setuptools rsync ccache cmake libdw-dev zlib1g-dev \
            libncurses5-dev # Added ncurses, often needed for kernel builds
          echo "Build environment packages setup complete."

      - name: Setup ccache
        uses: hendrikmuhs/ccache-action@v1.2
        with:
          key: ${{ github.workflow }}-${{ github.ref }}-${{ github.run_id }} # Specific key per run
          restore-keys: | # Allow restoring from previous runs on the same ref
            ${{ github.workflow }}-${{ github.ref }}-
          max-size: 2G # Set maximum ccache size

      - name: Setup Python and Repo Tool
        run: |
          echo "Setting up Python and repo tool..."
          python3 -m pip install --upgrade pip
          pip3 install gitpython xmltodict # Install required Python packages
          mkdir -p ~/.bin # Create bin directory for repo tool
          curl -s https://storage.googleapis.com/git-repo-downloads/repo > ~/.bin/repo # Download repo tool
          chmod a+x ~/.bin/repo # Make repo tool executable
          echo "$HOME/.bin" >> $GITHUB_PATH # Add repo tool directory to PATH
          # Configure git for repo tool and potential patching
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          echo "Python and repo tool setup complete."

      - name: Configure Build Directory
        run: |
          ROOT_DIR="${ROOT_DIR_PREFIX}-$(date +'%Y%m%d-%H%M')-release" # YYYYMMDD format
          echo "ROOT_DIR=${ROOT_DIR}" >> $GITHUB_ENV # Export ROOT_DIR
          echo "Build directory: ${ROOT_DIR}"
          mkdir -p "builds/${ROOT_DIR}" # Create the main build directory

      - name: Clone Tooling & Patch Repositories
        # Clone AnyKernel3 and patch sources *before* kernel source sync
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Cloning AnyKernel3 and patch source repositories..."
          repos=(
            "https://github.com/Kernel-SU/AnyKernel3 --depth=1 AnyKernel3"
            # Clone patch sources into separate dirs for clarity
            "https://gitlab.com/simonpunk/susfs4ksu.git -b gki-android14-6.1 --depth=1 susfs4ksu_patches"
            "https://github.com/WildPlusKernel/kernel_patches.git --depth=1 wild_kernel_patches"
          )
          for repo_info in "${repos[@]}"; do
            read -r url args name <<< "$repo_info" # Split repo info
            echo "Cloning ${url} into ${name}..."
            git clone $url $args $name || { echo "❌ Failed to clone ${url}"; exit 1; }
          done
          echo "Tooling and patch repositories cloned successfully."

      - name: Setup Kernel Source (OnePlus 13R)
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Setting up kernel source..."
          mkdir -p kernel_platform/oneplus13r_v # Create directory structure
          cd kernel_platform/oneplus13r_v # Change to the kernel source directory
          # Initialize repo for OnePlus 13R kernel source
          echo "Initializing repo for oneplus/sm8650/oneplus_13r..."
          repo init -u https://github.com/OnePlusOSS/kernel_manifest.git -b oneplus/sm8650 -m oneplus_13r.xml --depth=1 --git-lfs || \
            { echo "❌ Failed to initialize repo"; exit 1; }
          # Sync the repositories
          echo "Syncing repo (this may take a while)..."
          repo sync -c -j$(nproc --all) --force-sync --no-clone-bundle --no-tags || \
            { echo "❌ Failed to sync repo"; exit 1; }
          # Optional: Remove potentially problematic ABI files
          echo "Removing ABI GKI protected exports..."
          rm -rf ./kernel_platform/common/android/abi_gki_protected_exports_*
          echo "Kernel source setup complete."

      - name: Integrate KernelSU
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Setting up KernelSU..."
          curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -s next || \
            { echo "❌ Failed to setup KernelSU"; exit 1; }
          git submodule update --init --recursive # Initialize KSU submodules
          cd KernelSU-Next/kernel # Change to KSU kernel directory
          # Calculate KSU version
          KSU_VERSION=$(expr $(git rev-list --count HEAD) + 10200) # Use git from PATH
          echo "Determined KSU Version: ${KSU_VERSION}"
          echo "KSUVER=${KSU_VERSION}" >> $GITHUB_ENV # Export KSU version
          # Update version in KSU Makefile (more robust sed)
          sed -i "s/.*DKSU_VERSION=.*/\t\t\tDKSU_VERSION=${KSU_VERSION} \\\\/" Makefile || \
            { echo "❌ Failed to set KSU version in Makefile"; exit 1; }
          echo "KernelSU setup complete. KSU version set to ${KSU_VERSION}."

      - name: Integrate SUSFS (Apply Patches)
        # Run from the root of the build directory to access the pre-cloned patch repos
        working-directory: builds/${{ env.ROOT_DIR }}
        run: |
          echo "Applying SUSFS patches..."
          set -euxo pipefail # Exit on error, print commands

          KERNEL_PLATFORM_DIR="kernel_platform/oneplus13r_v/kernel_platform"
          SUSFS_PATCH_DIR="susfs4ksu_patches" # Cloned earlier
          WILD_PATCH_DIR="wild_kernel_patches"  # Cloned earlier

          # Check if patch directories exist
          if [ ! -d "$SUSFS_PATCH_DIR" ] || [ ! -d "$WILD_PATCH_DIR" ]; then
              echo "❌ Patch source directories not found!"
              exit 1
          fi

          # Copy patch files from pre-cloned repos to kernel source locations
          echo "Copying patch files..."
          # SUSFS core patch for GKI 6.1
          cp "${SUSFS_PATCH_DIR}/kernel_patches/50_add_susfs_in_gki-android14-6.1.patch" "${KERNEL_PLATFORM_DIR}/common/"
          # SUSFS integration patch for KSU-Next
          cp "${WILD_PATCH_DIR}/next/0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch" "${KERNEL_PLATFORM_DIR}/KernelSU-Next/"
          # Syscall hooks patch
          cp "${WILD_PATCH_DIR}/next/syscall_hooks.patch" "${KERNEL_PLATFORM_DIR}/common/"
          # SUSFS filesystem and include files
          cp "${SUSFS_PATCH_DIR}/kernel_patches/fs/"* "${KERNEL_PLATFORM_DIR}/common/fs/"
          cp "${SUSFS_PATCH_DIR}/kernel_patches/include/linux/"* "${KERNEL_PLATFORM_DIR}/common/include/linux/"

          # Apply patches within the kernel source tree
          echo "Applying patches..."
          cd "${KERNEL_PLATFORM_DIR}" # Change to kernel platform directory for patching

          cd ./KernelSU-Next
          patch -N -p1 < 0001-kernel-patch-susfs-v1.5.5-to-KernelSU-Next-v1.0.5.patch || echo "ℹ️ Patch 'KSU-Next SUSFS integration' applied previously or failed."
          cd ../common
          patch -N -p1 < 50_add_susfs_in_gki-android14-6.1.patch || echo "ℹ️ Patch 'SUSFS core GKI 6.1' applied previously or failed."
          # Optional hide_stuff patch (relative path from common/)
          HIDE_STUFF_PATCH_PATH="../../${WILD_PATCH_DIR}/69_hide_stuff.patch"
          if [ -f "$HIDE_STUFF_PATCH_PATH" ]; then
            echo "Applying optional hide_stuff patch..."
            cp "$HIDE_STUFF_PATCH_PATH" ./
            patch -N -p1 -F 3 < 69_hide_stuff.patch || echo "ℹ️ Optional patch 'hide_stuff' applied previously or failed."
          else
            echo "ℹ️ Optional patch 69_hide_stuff.patch not found at $HIDE_STUFF_PATCH_PATH, skipping."
          fi
          patch -N -p1 -F 3 < syscall_hooks.patch || echo "ℹ️ Patch 'syscall_hooks' applied previously or failed."

          echo "SUSFS patching complete."
          set +euxo pipefail # Turn off strict mode

      - name: Apply KernelSU Compatibility Fixes for Kprobes=n
        # Fixes issues in sucompat.c when CONFIG_KSU_WITH_KPROBES=n
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform/common/drivers/kernelsu
        run: |
          echo "Applying compatibility fixes to sucompat.c..."
          TARGET_FILE="sucompat.c"

          # Verify the target file exists
          if [ ! -f "$TARGET_FILE" ]; then
            echo "❌ Error: $TARGET_FILE not found in $(pwd)! Cannot apply fix."
            exit 1 # Fail early
          fi

          # Check if patches are already applied (simple check)
          if grep -q "ADDED_KPROBE_FIX" "$TARGET_FILE"; then
             echo "✅ Compatibility fixes already seem to be applied. Skipping."
             exit 0
          fi

          # Add conditional compilation around the problematic sections
          # Note: Line numbers are approximate and might need adjustment if sucompat.c changes significantly.
          echo "Wrapping ksu_devpts_hook usage (around line 428)..."
          sed -i '428i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || { echo "❌ Failed to insert #ifdef before line 428"; exit 1; }
          sed -i '429a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || { echo "❌ Failed to insert #endif after line 428"; exit 1; }

          echo "Wrapping kprobe enable section (around lines 437-440)..."
          sed -i '437i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || { echo "❌ Failed to insert #ifdef before line 437"; exit 1; }
          sed -i '441a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || { echo "❌ Failed to insert #endif after line 440"; exit 1; }

          echo "Wrapping kprobe disable section (around lines 445-448)..."
          sed -i '445i#ifdef CONFIG_KSU_WITH_KPROBES /* ADDED_KPROBE_FIX */' "$TARGET_FILE" || { echo "❌ Failed to insert #ifdef before line 445"; exit 1; }
          sed -i '449a#endif /* CONFIG_KSU_WITH_KPROBES */' "$TARGET_FILE" || { echo "❌ Failed to insert #endif after line 448"; exit 1; }

          echo "✅ Fixes applied to $TARGET_FILE."
          # Optional: Display the patched sections for verification during run
          echo "--- Patched sections in $TARGET_FILE ---"
          sed -n '425,452p' "$TARGET_FILE" || echo "⚠️ Could not display patched lines."
          echo "--------------------------------------"

      - name: Configure Kernel Options
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Applying kernel configurations..."
          set -e # Exit on error
          CONFIG_FILE="./common/arch/arm64/configs/gki_defconfig"
          # List of kernel config options to ensure are set
          # !! ENSURE THIS MATCHES YOUR INTENT - KPROBES=n IS THE CAUSE OF THE ERROR !!
          CONFIGS=(
            "CONFIG_KSU=y"
            "CONFIG_KSU_WITH_KPROBES=n" # This is set to 'n', triggering the need for the fix above
            "CONFIG_KSU_SUSFS=y"
            "CONFIG_KSU_SUSFS_HAS_MAGIC_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_PATH=y"
            "CONFIG_KSU_SUSFS_SUS_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_KSU_DEFAULT_MOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_SUS_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SUS_KSTAT=y"
            "CONFIG_KSU_SUSFS_SUS_OVERLAYFS=n"
            "CONFIG_KSU_SUSFS_TRY_UMOUNT=y"
            "CONFIG_KSU_SUSFS_AUTO_ADD_TRY_UMOUNT_FOR_BIND_MOUNT=y"
            "CONFIG_KSU_SUSFS_SPOOF_UNAME=y"
            "CONFIG_KSU_SUSFS_ENABLE_LOG=y" # Enable logs during development
            "CONFIG_KSU_SUSFS_HIDE_KSU_SUSFS_SYMBOLS=y"
            "CONFIG_KSU_SUSFS_SPOOF_CMDLINE_OR_BOOTCONFIG=y"
            "CONFIG_KSU_SUSFS_OPEN_REDIRECT=y"
            "CONFIG_KSU_SUS_SU=n"
            # Filesystem
            "CONFIG_TMPFS_XATTR=y"
            "CONFIG_TMPFS_POSIX_ACL=y"
            # Network
            "CONFIG_IP_NF_TARGET_TTL=y"
            "CONFIG_IP6_NF_TARGET_HL=y"
            "CONFIG_IP6_NF_MATCH_HL=y"
            # Scheduler
            "CONFIG_SCHED_CLASS_EXT=y"
            "CONFIG_SMP=y"
            "CONFIG_CPU_FREQ_GOV_SCHEDUTIL=y"
            "CONFIG_MSM_PERFORMANCE=y"
            # Power management
            "CONFIG_NO_HZ_IDLE=y"
            "CONFIG_PM_SLEEP_SMP=y"
            # Disable excessive debugging features for release
            "CONFIG_DEBUG_KERNEL=n"
            "CONFIG_DYNAMIC_DEBUG=n"
            "CONFIG_DEBUG_INFO=n"
          )
          echo "Applying configurations to $CONFIG_FILE..."
          touch "$CONFIG_FILE" # Ensure file exists
          for CONFIG in "${CONFIGS[@]}"; do
            CONFIG_KEY=$(echo "$CONFIG" | cut -d'=' -f1)
            # Remove existing line(s) for this key (commented or uncommented)
            sed -i "/^${CONFIG_KEY}=/d" "$CONFIG_FILE"
            sed -i "/^# ${CONFIG_KEY} is not set/d" "$CONFIG_FILE"

            # Add the desired line
            if [[ "$CONFIG" == *=n ]]; then
                echo "# ${CONFIG_KEY} is not set" >> "$CONFIG_FILE"
                echo "Set: # ${CONFIG_KEY} is not set"
            else
                echo "$CONFIG" >> "$CONFIG_FILE"
                echo "Set: ${CONFIG}"
            fi
          done
          # Ensure the file is sorted and unique (optional but good practice)
          sort -u "$CONFIG_FILE" -o "$CONFIG_FILE"

          # Apply GKI build config modification
          sed -i 's/check_defconfig//' ./common/build.config.gki || echo "ℹ️ 'check_defconfig' not found in common/build.config.gki"
          set +e
          echo "Kernel configuration applied."

      - name: Apply Final Source Modifications (sed)
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v/kernel_platform
        run: |
          echo "Running final sed modifications..."
          # Remove '-dirty' suffix from version strings
          echo "Removing '-dirty' suffix from versioning scripts..."
          # Use find more broadly within kernel_platform
          find . -path '*/scripts/setlocalversion' -exec sed -i 's/-dirty//' {} + || echo "⚠️ Could not modify some setlocalversion scripts"
          find . -path '*/build/kernel/kleaf/workspace_status_stamp.py' -exec sed -i "s/'git_dirty': '1'/'git_dirty': '0'/" {} + || echo "ℹ️ workspace_status_stamp.py not found or modification failed."
          echo "Final source modifications complete."

      - name: Build Kernel using Bazel script (Full LTO for GKI)
        # This step focuses *only* on running the OnePlus build script.
        working-directory: builds/${{ env.ROOT_DIR }}/kernel_platform/oneplus13r_v # Run from one level above kernel_platform
        run: |
          echo "Starting Bazel kernel build..."
          # Add ccache to PATH
          export PATH="/usr/lib/ccache:$PATH"
          echo "Initial ccache stats:"
          ccache -s

          # Define output directory relative to current working dir
          export BAZEL_OUTPUT_DIR="$(pwd)/out"
          mkdir -p "${BAZEL_OUTPUT_DIR}"
          echo "Bazel output directory: ${BAZEL_OUTPUT_DIR}"

          # Execute the main build script provided by OnePlus source
          # Assumes build_with_bazel.py is in the working directory (oneplus13r_v)
          # Adjust -t target if 'pineapple' isn't correct for 13r
          ./build_with_bazel.py \
            -t pineapple `# Adjust target name if needed for OP13r` \
            gki \
            --jobs=$(nproc --all) \
            --verbose_failures \
            --config=stamp \
            --user_kmi_symbol_lists=//msm-kernel:android/abi_gki_aarch64_qcom \
            --ignore_missing_projects \
            --lto=full `# Apply full LTO specifically for this GKI build (may increase build time/memory)` \
            -o "${BAZEL_OUTPUT_DIR}" || { echo "❌ Bazel build failed"; exit 1; }

          echo "✅ Bazel kernel build completed successfully."
          echo "Final ccache stats:"
          ccache -s

          # --- Verification ---
          echo "Verifying build outputs..."
          if [ ! -f "${BAZEL_OUTPUT_DIR}/dist/Image" ]; then
              echo "❌ Error: Kernel Image (${BAZEL_OUTPUT_DIR}/dist/Image) not found after Bazel build!"
              echo "Listing ${BAZEL_OUTPUT_DIR}/dist/ :"
              ls -l "${BAZEL_OUTPUT_DIR}/dist/"
              exit 1
          else
              echo "✅ Kernel Image found."
          fi
          if [ ! -d "${BAZEL_OUTPUT_DIR}/staging/lib/modules" ] || [ -z "$(ls -A ${BAZEL_OUTPUT_DIR}/staging/lib/modules)" ]; then
              echo "⚠️ Warning: Module staging directory (${BAZEL_OUTPUT_DIR}/staging/lib/modules) not found or empty. ZIP may lack modules."
          else
              echo "✅ Module staging directory found."
          fi
          echo "Build output verification complete."

      - name: Create Flashable ZIP Package (AnyKernel3)
        working-directory: builds/${{ env.ROOT_DIR }} # Run from the root build directory
        run: |
          echo "Creating AnyKernel3 ZIP package..."
          AK3_DIR="AnyKernel3"
          # Paths relative to the current working directory (builds/${{ env.ROOT_DIR }})
          BAZEL_OUTPUT_DIR="kernel_platform/oneplus13r_v/out"
          KERNEL_IMAGE_PATH="${BAZEL_OUTPUT_DIR}/dist/Image"
          MODULE_STAGING_PATH="${BAZEL_OUTPUT_DIR}/staging"

          # 1. Verify and Copy Kernel Image
          if [ ! -f "$KERNEL_IMAGE_PATH" ]; then
            echo "❌ Kernel image not found at $KERNEL_IMAGE_PATH"
            ls -l "$(dirname "$KERNEL_IMAGE_PATH")" # Debugging
            exit 1
          fi
          echo "Copying kernel image to $AK3_DIR..."
          cp "$KERNEL_IMAGE_PATH" "$AK3_DIR/Image" || \
            { echo "❌ Failed to copy kernel image to $AK3_DIR"; exit 1; }

          # 2. Find and Copy Modules
          # Find the kernel version specific module directory under staging
          MODULE_SRC_ROOT=$(find "$MODULE_STAGING_PATH/lib/modules/" -maxdepth 1 -mindepth 1 -type d -print -quit)
          if [ -d "$MODULE_SRC_ROOT/kernel" ]; then
              MODULE_TARGET_DIR="$AK3_DIR/modules/vendor/lib/modules" # Standard path in AK3
              echo "Copying kernel modules from $MODULE_SRC_ROOT/kernel to $MODULE_TARGET_DIR..."
              mkdir -p "$MODULE_TARGET_DIR"
              # Copy all .ko files, preserving structure relative to 'kernel'
              find "$MODULE_SRC_ROOT/kernel" -name '*.ko' -exec cp --parents -t "$MODULE_TARGET_DIR" {} + || \
                { echo "⚠️ Failed to copy some kernel modules."; } # Warn only

              # Copy module metadata files (important for loading)
              echo "Copying module metadata files..."
              cp "$MODULE_SRC_ROOT/modules.alias" "$MODULE_TARGET_DIR/" 2>/dev/null || true
              cp "$MODULE_SRC_ROOT/modules.dep" "$MODULE_TARGET_DIR/" 2>/dev/null || true
              cp "$MODULE_SRC_ROOT/modules.softdep" "$MODULE_TARGET_DIR/" 2>/dev/null || true
              cp "$MODULE_SRC_ROOT/modules.builtin" "$MODULE_TARGET_DIR/" 2>/dev/null || true # Might not be needed
              # Ensure modules.load exists, even if empty, for init scripts
              touch "$MODULE_TARGET_DIR/modules.load"
              echo "Module copy complete."
          else
              echo "⚠️ Kernel modules staging path ($MODULE_STAGING_PATH/lib/modules/*/kernel) not found or empty. ZIP will not contain modules."
          fi

          # 3. Create ZIP File
          cd "$AK3_DIR" # Go into AnyKernel3 directory
          ZIP_NAME="OP13r-KSU-${{ env.KSUVER }}-${{ github.run_number }}.zip" # Unique name
          echo "📦 Creating zip file: ../$ZIP_NAME"
          # Zip contents of current directory (-r for recursive, -9 for best compression, -x to exclude)
          zip -r9 "../$ZIP_NAME" . -x ".git*" || \
            { echo "❌ Failed to create zip file"; exit 1; }
          cd .. # Return to build root directory

          # 4. Final Check and Export Name
          echo "✅ ZIP package created successfully:"
          ls -lh "$ZIP_NAME"
          echo "zip_name=$ZIP_NAME" >> $GITHUB_ENV

      - name: Upload Build Artifact (Flashable ZIP)
        uses: actions/upload-artifact@v4
        with:
          name: OP13r-KSU-${{ env.KSUVER }} # Artifact name
          path: builds/${{ env.ROOT_DIR }}/${{ env.zip_name }} # Path to the zip file
          if-no-files-found: error # Fail if zip isn't found
          retention-days: 7 # Optional: Keep artifact for 7 days
